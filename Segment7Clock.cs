// Copyright 2010-2020 Nakagawa Tomoya
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.Drawing;
using System.Drawing.Imaging;
using System.Drawing.Drawing2D;

namespace digital_photo_frame_screen_saver
{
	// 7segのフォントの基底クラス
	public interface Segment7DigitFont
	{
		double[] a { get; }
		double[] b { get; }
		double[] c { get; }
		double[] d { get; }
		double[] e { get; }
		double[] f { get; }
		double[] g { get; }

		float height { get; }
	}

	public class Segment7ClockFont : Segment7DigitFont
	{
		public double[] a
		{
			get
			{
				return new double[] {
0.128258989931142,0.0453859327738863,
0.153868735842104,0.0194941170673085, 0.19091014499507,0.00415645404608226, 0.226958045138577,0.000775298989255595,
0.436278128941692,0.000766317304950039, 0.635771055550515,0, 0.84509113935363,0,
0.874006504356409,0.00206039837969461, 0.910011247506828,0.0140370253169386, 0.932475921932934,0.0313297315609553,
0.895275267517231,0.0789534958879925, 0.858094282990156,0.126592573986771, 0.820917115678912,0.174234660949791,
0.632782400097841,0.174238208715092, 0.444647666553403,0.174243642634097, 0.256512906063911,0.174243642634097,
0.212526095162723,0.129951589191784, 0.169196519010594,0.0874087636764001, 0.128258989931142,0.045385483689671,
};
			}
		}
		public double[] b
		{
			get
			{
				return new double[] {
0.79340114199936,0.797456795455741,
0.804210733786362,0.59183865654611, 0.815020280664942,0.386220553563217, 0.825829872451943,0.180602405671901,
0.863621072610737,0.132506923285136, 0.900755711646795,0.0838786473853659, 0.93933236009811,0.0364133648779003,
0.974143661946428,0.0629888214853955, 0.995197134134446,0.105635340546087, 0.999999999999999,0.148668116940339,
0.99913317764767,0.218633865436785, 0.99320517618916,0.288458288028851, 0.990232687768236,0.35836520694218,
0.982478934432514,0.500925868371583, 0.975638079489608,0.64362534173193, 0.967313360482582,0.786099141292415,
0.958308413614674,0.834656641519857, 0.921005817082103,0.881661792340349, 0.874418134948133,0.895854694788411,
0.841812689856838,0.856649463160972, 0.821156836833027,0.831499804028562, 0.79340114199936,0.797456795455741,
};
			}
		}
		public double[] c
		{
			get
			{
				return new double[] {
0.75021909001195,1.62950947604342,
0.760495079934358,1.4180935162076, 0.772182182278013,1.20673198537867, 0.783145181232953,0.995343464588412,
0.813335720865013,0.96427016011438, 0.843510452732695,0.933181407143343, 0.873608570833251,0.902018555276785,
0.911792809497257,0.918659370873904, 0.939339231086604,0.95503231817243, 0.950386792599281,0.994633327718793,
0.957995626458733,1.01693731981267, 0.952775965532981,1.06346365704284, 0.951043533355703,1.09869471790717,
0.940924049282319,1.28879229077638, 0.93253340471249,1.47902984319549, 0.920851197386782,1.66901846823407,
0.914884754319444,1.70842412614679, 0.892619608010185,1.74932038438685, 0.861970104310111,1.77198404802875,
0.825681809386166,1.72659043591478, 0.78893082299522,1.67905927275294, 0.75021909001195,1.62950947604342,
};
			}
		}
		public double[] d
		{
			get
			{
				return new double[] {
0.0398671368972457,1.75292931495767,
0.0536163432424443,1.74069154554924, 0.140077449407765,1.66847929772521, 0.180476212154148,1.63456930789695,
0.368368489621601,1.63456032621265, 0.556260785052422,1.63455134452834, 0.744153040065663,1.63454236284403,
0.781034530329569,1.68233853060132, 0.818886222132161,1.72976644930207, 0.855405705610131,1.77693686311379,
0.825195585906285,1.79970233414729, 0.787249945685857,1.81014354215249, 0.749139940642637,1.80828410895914,
0.550879678351277,1.80830207232775, 0.352820273466041,1.80876319199999, 0.154575235129579,1.80836718953896,
0.110750453813263,1.80799938956665, 0.0611239086113511,1.78012536104226, 0.0398671368972457,1.75292944968293,
};
			}
		}
		public double[] e
		{
			get
			{
				return new double[] {
0,1.65547606427184,
0.0091898797926675,1.44227997951508, 0.0216086301398525,1.22921287174495, 0.0324557204588298,1.01608594595735,
0.0355888463035585,0.966341695782614, 0.0761913127518232,0.911604302760312, 0.12651905804747,0.89632290999126,
0.166513285732731,0.945428158236077, 0.185016318845342,0.968067212062976, 0.207250253801639,0.995093279772081,
0.19627288415181,1.20112939034256, 0.185279841462867,1.42371146992388, 0.173405785360393,1.6296971932454,
0.127665794591182,1.66883658912688, 0.0815778084635514,1.70758564100844, 0.035161228313771,1.74592009834246,
0.01573258772505,1.72694867039331, 0.000347142098409768,1.68036000027407, 0,1.65547606427184,
};
			}
		}
		public double[] f
		{
			get
			{
				return new double[] {
0.0465566055511809,0.748788146885017,
0.0575083315941495,0.544645878340475, 0.0673857592754989,0.340365731960159, 0.0792305350871374,0.136325216917114,
0.0860777221174782,0.105679844791821, 0.0995550986853376,0.0728160415514767, 0.122207804672381,0.0514474020611771,
0.165529970934958,0.0938900817965541, 0.205205528461058,0.133625367523286, 0.250101689989762,0.17852741205521,
0.23930736706608,0.384837208019001, 0.228513044142398,0.59114699949195, 0.217718721218716,0.797456795455741,
0.187362424602797,0.828426002208671, 0.157045782123087,0.859434099654645, 0.126728825284426,0.890441792924824,
0.0797482393705096,0.869501939043272, 0.0399313110316089,0.812602160615985, 0.0465566055511809,0.748788146885017,
};
			}
		}
		public double[] g
		{
			get
			{
				return new double[] {
0.134814945847875,0.893681666087525,
0.155684383324472,0.871716687667757, 0.195138452515597,0.830819171991887, 0.216122271741825,0.808963725212226,
0.408611038423699,0.808941271001462, 0.601099778160521,0.808915673201191, 0.793588499933974,0.808891871737782,
0.817679218486759,0.838854366405324, 0.84225014279094,0.86845427047745, 0.86588158291676,0.898768218451869,
0.838633577788464,0.926981530100904, 0.811385617568591,0.955194841749938, 0.784137657348717,0.983408153398973,
0.591971153499726,0.983408153398973, 0.399804636178208,0.983408153398973, 0.207638127838375,0.983408153398973,
0.181477939404747,0.951129866158508, 0.148835310140427,0.910952412113414, 0.134814945847875,0.893681621179103,
};
			}
		}

		public float height { get { return 1.80836718953896f; } }
	}

	// カレンダーのフォント
	public class Segment7CalendarFont : Segment7DigitFont
	{
		public double[] a
		{
			get
			{
				return new double[] {
0.146441052036201,0.0539124115275228,
0.178761611138411,0.0242809568269103, 0.221181433719872,0.0061916625386371, 0.264346120180327,0.000491359165369826,
0.444070945418335,0.000435069898002864, 0.623837650794039,-0.000475662764748338, 0.803536338433717,0,
0.843607745097382,0.00237356153313607, 0.883359271850675,0.0161240144985226, 0.915843715770661,0.0397636612428969,
0.87517841119753,0.0917088274701857, 0.834653091572917,0.143763296381403, 0.794036878623129,0.195746756151142,
0.62565034975823,0.1959520735608, 0.457263843962703,0.196157390970459, 0.288877324325553,0.196362892935092,
0.241398600730848,0.148880339593962, 0.193919849452896,0.101396376483517, 0.146441052036201,0.0539124115275228,
};
			}
		}
		public double[] b
		{
			get
			{
				return new double[] {
0.769226230562547,0.844871174774769,
0.780301466888203,0.633530776597327, 0.791376703213859,0.422190378419886, 0.802451939539515,0.210849978396894,
0.844351409369038,0.157182821975614, 0.886250833059818,0.103515667399883, 0.928150256750597,0.0498484648398594,
0.972170309381311,0.0851868668928382, 0.996907227729392,0.142110357431297, 1,0.197723275338869,
0.988858739132047,0.412328784837405, 0.97775106726954,0.627052223350094, 0.966070582903457,0.841555460094392,
0.958005576635853,0.891342994109264, 0.927397226313961,0.938200302647735, 0.882165985521239,0.961655901943317,
0.843934684235548,0.921928551891746, 0.802723143075239,0.879406070605456, 0.769226230562547,0.844871174774769,
};
			}
		}
		public double[] c
		{
			get
			{
				return new double[] {
0.722247115740593,1.75465139543888,
0.733293238518947,1.5315678472536, 0.744594508550202,1.30846962694781, 0.75718923212356,1.08547489584424,
0.798612596256395,1.04952695484767, 0.840088420140866,1.01363922491168, 0.881428780673706,0.977595868993048,
0.931639453107449,1.01119659367916, 0.958735537700617,1.07495258622361, 0.951129888765722,1.13457953031297,
0.939550079138488,1.35233935955141, 0.928543820234729,1.57018007000764, 0.916575291691456,1.7878825487876,
0.908273593668448,1.83550488383609, 0.884996228339947,1.88321695874115, 0.846800453886939,1.91342500932232,
0.804002616577988,1.85939857050351, 0.761824930123692,1.80536751781033, 0.722247115740593,1.75465139543888,
};
			}
		}
		public double[] d
		{
			get
			{
				return new double[] {
0.0522940212687327,1.89671544802695,
0.103850562241633,1.85293702399722, 0.15591328998798,1.80974331626695, 0.207714549473533,1.76624855323376,
0.375563155952876,1.76629007810313, 0.543411730135099,1.76633529407199, 0.711260327386693,1.76637774171624,
0.751933383268773,1.8189938114163, 0.792942836731486,1.8713485512718, 0.83402329772082,1.9236468634437,
0.805665918289938,1.9442333249596, 0.771869842162814,1.95711886103477, 0.737334392667201,1.96211896283299,
0.551926589154202,1.96209589346112, 0.366453144050478,1.96282626977457, 0.181086357880667,1.96233396937883,
0.135854978671713,1.95675574912151, 0.0876551711065394,1.93493549145917, 0.0522940212687328,1.8967154941657,
};
			}
		}
		public double[] e
		{
			get
			{
				return new double[] {
0,1.73137758279364,
0.0113479624399233,1.51857633048405, 0.0216899156189878,1.30567177352721, 0.0336667030896676,1.09293520773635,
0.0394468264896109,1.04153867731091, 0.0719045113223884,0.993458138398314, 0.117477501790018,0.969096005065661,
0.155979545223995,1.00727807631178, 0.193153854029268,1.04680301569455, 0.230964185417044,1.08567804473295,
0.218864530564053,1.30827833571625, 0.208184980104741,1.53221997225767, 0.195625875641553,1.75477675440563,
0.14585398266081,1.79866715716642, 0.0883598942784762,1.84612837572175, 0.0425792319410949,1.88344096234202,
0.0115528646008878,1.84871126873525, -0.00719436817316642,1.78383059817331, 0,1.73137758279364,
};
			}
		}
		public double[] f
		{
			get
			{
				return new double[] {
0.0480718648287731,0.817121950125169,
0.0594975249131603,0.603663617510427, 0.0697553225000766,0.390116255575758, 0.0822040169494865,0.176733053445779,
0.0889852588111744,0.135850298818935, 0.106195702308623,0.0957998852836726, 0.135064345158926,0.065603830775872,
0.182373582692364,0.11305443742014, 0.229682774087058,0.160505088357602, 0.276991988551125,0.20795569500187,
0.26570550598724,0.420302805502348, 0.255026509192852,0.632684241382621, 0.243014610230461,0.844991181647245,
0.201575235953547,0.880650524801703, 0.158966844326406,0.918118875820853, 0.119047326407144,0.952236631269356,
0.0851129263262773,0.932483112494258, 0.0471903379908114,0.878310137025319, 0.0480718648287731,0.817121950125169,
};
			}
		}
		public double[] g
		{
			get
			{
				return new double[] {
0.133221702150045,0.961680863003683,
0.169131993931724,0.930249628187127, 0.206126730746347,0.897983881912485, 0.242037022528026,0.866552647095929,
0.417569962955844,0.866571102593426, 0.593102880314291,0.866589558090924, 0.768635839197606,0.866608013588421,
0.801029943457343,0.900723877348431, 0.834070820626875,0.934245058840332, 0.865685779921017,0.969085623848319,
0.830558185788202,1.00163766102789, 0.794007580520852,1.03262199597255, 0.758102733110936,1.06431285350015,
0.582569820366363,1.06429901187702, 0.407036861483047,1.06428978412827, 0.231503916441355,1.06427594250515,
0.199379769971261,1.030109510682, 0.162098280864272,0.991745837340508, 0.133221702150045,0.96168095528117,
};
			}
		}

		public float height { get { return 1.96233396937883f; } }
	}

	//------------------------------------------------------------//

	// 7seg時計のパーツを描画するクラス
	public interface Segment7Component
	{
		void Draw( Graphics g, int n, Rectangle targetRect, Color color );

		// 自身のwidth=1としたときのheightを取得する
		float Height { get; }
	}

	// 何もしないクラス（space）
	public class Segment7Null : Segment7Component
	{
		// do nothing
		public void Draw( Graphics g, int n, Rectangle targetRect, Color color ) { }

		public float Height { get { return 1.0F; } }
	}

	// 7seg時計の数値を描画するようなクラス
	public class Segment7Digit< _FontType > : Segment7Component
		where _FontType : Segment7DigitFont, new()
	{
		// 各segmentを描画するpath
		// 0=a,1=b,...,6=g
		GraphicsPath[] pathSegments;
		_FontType font;

		public Segment7Digit()
		{
			// double[]をPointF[]にする
			Func<double[], PointF[]> ConvertToPointFs = ( double[] a ) =>
			{
				var result = new List<PointF>();
				for( int i = 0; i < a.Length; i += 2 )
				{
					result.Add( new PointF( ( float ) a[ i ], ( float ) a[ i + 1 ] ) );
				}
				return result.ToArray();
			};

			// fontを作る
			this.font = new _FontType();

			// path segmentを作る
			this.pathSegments = new GraphicsPath[ 7 ];
			// open
			for( int i = 0; i < this.pathSegments.Length; ++i )
			{
				this.pathSegments[ i ] = new GraphicsPath();
				this.pathSegments[ i ].StartFigure();
			}

			// draw
			this.pathSegments[ 0 ].AddBeziers( ConvertToPointFs( this.font.a ) );
			this.pathSegments[ 1 ].AddBeziers( ConvertToPointFs( this.font.b ) );
			this.pathSegments[ 2 ].AddBeziers( ConvertToPointFs( this.font.c ) );
			this.pathSegments[ 3 ].AddBeziers( ConvertToPointFs( this.font.d ) );
			this.pathSegments[ 4 ].AddBeziers( ConvertToPointFs( this.font.e ) );
			this.pathSegments[ 5 ].AddBeziers( ConvertToPointFs( this.font.f ) );
			this.pathSegments[ 6 ].AddBeziers( ConvertToPointFs( this.font.g ) );
			// close
			foreach( var i in this.pathSegments ) { i.CloseFigure(); }
		}

		// 数字n [0,9]を描画する
		// n=10の場合はblank
		public void Draw( Graphics g, int n, Rectangle targetRect, Color color )
		{
			if( n == 10 )
			{
				// draw nothing!
				return;
			}

			if( n < 0 || n > 9 ) { throw new ArgumentException( "n := [0,9]" ); }

			int[,] DigitFont = new int[ 10, 7 ]
			{
			//a  b  c  d  e  f  g
			{ 1, 1, 1, 1, 1, 1, 0, },	// 0 abcdef
			{ 0, 1, 1, 0, 0, 0, 0, },   // 1 bc
			{ 1, 1, 0, 1, 1, 0, 1, },   // 2 abged
			{ 1, 1, 1, 1, 0, 0, 1, },   // 3 abcdg
			{ 0, 1, 1, 0, 0, 1, 1, },   // 4 bcfg
			{ 1, 0, 1, 1, 0, 1, 1, },   // 5 afgcd
			{ 1, 0, 1, 1, 1, 1, 1, },   // 6 afedcg
			{ 1, 1, 1, 0, 0, 0, 0, },   // 7 abc
			{ 1, 1, 1, 1, 1, 1, 1, },   // 8 abcdefg
//			{ 1, 1, 0, 0, 0, 0, 0, },   // 8 abcdefg
			{ 1, 1, 1, 0, 0, 1, 1, },   // 9 abcfg
			};

			// (x,y)からwidthを基準に描画する
			// heightは無視する

			float scale = 1.0f / targetRect.Width;

			// scaling matrix
			var m = new Matrix();
			m.Scale( 1 / scale, 1 / scale );
			//m.Translate( targetRect.X - this.outline.X, targetRect.Y - this.outline.Y );
			m.Translate( targetRect.X * scale, targetRect.Y * scale );

			// solid monocolor brush
			var brush = new SolidBrush( color );

			for( int seg = 0; seg < 7; ++seg )
			{
				if( DigitFont[ n, seg ] != 0 )
				{
					// transform
					var tempPath = ( GraphicsPath ) this.pathSegments[ seg ].Clone();
					tempPath.Transform( m );
					g.FillPath( brush, tempPath );
				}
			}
		}

		public float Height { get { return this.font.height; } }
	}

	public class Segment7Colon : Segment7Component
	{
		PointF c1, c2;
		PointF outline;
		float diameter;

		public Segment7Colon()
		{
			c1 = new PointF( 0.1354f, 0.4299f );
			c2 = new PointF( 0.0879f, 1.378f );
			outline = new PointF( 0.2209f, 1.808f );
			diameter = 0.1733f;
		}

		public void Draw( Graphics g, int n, Rectangle targetRect, Color color )
		{
			float scale = this.outline.X / targetRect.Width;

			// solid monocolor brush
			var brush = new SolidBrush( color );

			// draw circle
			float d = this.diameter / scale;
			float r = d / 2;
			g.FillEllipse( brush, targetRect.X + this.c1.X / scale - r, targetRect.Y + this.c1.Y / scale - r, d, d );
			g.FillEllipse( brush, targetRect.X + this.c2.X / scale - r, targetRect.Y + this.c2.Y / scale - r, d, d );
		}

		public float Height { get { return this.outline.Y / this.outline.X; } }
	}

	// カレンダーの区切りの /
	public class Segment7Slash : Segment7Component
	{
		PointF size;
		PointF begin, end;
		float width;

		public Segment7Slash()
		{
			// digitの横幅を1としたときの大きさ
			size = new PointF( 0.6959f, 1.956f );
			begin = new PointF( 0.6594f, 0.2628f );
			end = new PointF( 0.06813f, 1.698f );
			width = 0.04492f;
		}

		public void Draw( Graphics g, int n, Rectangle targetRect, Color color )
		{
			float scale = this.size.X / targetRect.Width;

			// solid monocolor pen with rounded begin/end style
			var pen = new Pen( color, this.width / scale );
			pen.StartCap = pen.EndCap = LineCap.Round;

			// draw a line
			g.DrawLine( pen
				, this.begin.X / scale + targetRect.X, this.begin.Y / scale + targetRect.Y
				, this.end.X / scale + targetRect.X, this.end.Y / scale + targetRect.Y );
		}

		public float Height { get { return this.size.Y / this.size.X; } }
	}

	// 16segを描画するようなクラス
	public class Segment16Digit : Segment7Component
	{
		// font
		private struct Segment16Font
		{
			public double[] a
			{
				get
				{
					return new double[] {
0.543805330150265,0.000378264097559061,
0.439027696024937,0.000574602591294428, 0.334253864145918,0.000770501450300418, 0.226959202374716,0.000775111673949009,
0.190911305211454,0.00415625920344161, 0.153869275104876,0.0194942475239302, 0.12825953026503,0.0453860596297395,
0.169197056770431,0.0874093413324625, 0.212526600192308,0.12995126012543, 0.256513409416621,0.174243312495157,
0.349245218305323,0.174243312495157, 0.441976361800921,0.174240460810426, 0.534708158807603,0.174238678507469,
0.537740545294484,0.116285203868961, 0.540772943663384,0.0583317339832598, 0.543805330150265,0.000378264097559089,
};
				}
			}
			public double[] b
			{
				get
				{
					return new double[] {
0.542721559250235,0.174238671378257,
0.635453356256917,0.1742368890753, 0.728184511634535,0.174235819693526, 0.820916308641217,0.174234037390569,
0.858093472957989,0.126591950559968, 0.895274356346932,0.0789533118914874, 0.932475011416676,0.0313295471352833,
0.910010330256648,0.0140368477518315, 0.874006467858442,0.00206040162830923, 0.845091109488419,0,
0.745779299487166,0, 0.648805383802597,0.000185300097422115, 0.551818730592896,0.000366679128338986,
0.548786344106016,0.0583240106704464, 0.545753945737115,0.116281342212554, 0.542721559250235,0.174238671378257,
};
				}
			}
			public double[] c
			{
				get
				{
					return new double[] {
0.79340114199936,0.797457161438823,
0.804210733786362,0.591839022529192, 0.815020280664942,0.386220919546298, 0.825829872451943,0.180602771654983,
0.863621072610737,0.132507289268218, 0.900755711646795,0.0838790133684477, 0.93933236009811,0.0364137308609821,
0.974143661946428,0.0629891874684773, 0.995197134134446,0.105635706529169, 0.999999999999999,0.148668482923421,
0.99913317764767,0.218634231419867, 0.99320517618916,0.288458654011933, 0.990232687768236,0.358365572925262,
0.982478934432514,0.500926234354665, 0.975638079489608,0.643625707715012, 0.967313360482582,0.786099507275496,
0.958308413614674,0.834657007502939, 0.921005817082103,0.881662158323431, 0.874418134948133,0.895855060771493,
0.841812689856838,0.856649829144053, 0.821156836833027,0.831500170011644, 0.79340114199936,0.797457161438823,
};
				}
			}
			public double[] d
			{
				get
				{
					return new double[] {
0.75021909001195,1.6295098420265,
0.760495079934358,1.41809388219068, 0.772182182278013,1.20673235136176, 0.783145181232953,0.995343830571494,
0.813335720865013,0.964270526097462, 0.843510452732695,0.933181773126425, 0.873608570833251,0.902018921259867,
0.911792809497257,0.918659736856986, 0.939339231086604,0.955032684155511, 0.950386792599281,0.994633693701875,
0.957995626458733,1.01693768579576, 0.952775965532981,1.06346402302592, 0.951043533355703,1.09869508389026,
0.940924049282319,1.28879265675946, 0.93253340471249,1.47903020917857, 0.920851197386782,1.66901883421715,
0.914884754319444,1.70842449212987, 0.892619608010185,1.74932075036994, 0.861970104310111,1.77198441401183,
0.825681809386166,1.72659080189787, 0.78893082299522,1.67905963873602, 0.75021909001195,1.6295098420265,
};
				}
			}
			public double[] e
			{
				get
				{
					return new double[] {
0.457319542564024,1.80847588573981,
0.554575430458399,1.80840697002547, 0.651832185740213,1.80829444729879, 0.749139154437334,1.80828553578401,
0.787249164239743,1.81014507186907, 0.825196532956323,1.79970291530501, 0.855406651250418,1.77693744081595,
0.818887168606772,1.72976701075786, 0.78103344208755,1.68233969143356, 0.744151961831332,1.63454355421739,
0.651574318187731,1.63454751489062, 0.55899667454413,1.63455147556386, 0.46641903090053,1.6345554362371,
};
				}
			}
			public double[] f
			{
				get
				{
					return new double[] {
0.458407947451742,1.63455745618045,
0.365763780340442,1.63456141685369, 0.273119613229142,1.63456537752692, 0.180475446117843,1.63456933820016,
0.140076674150262,1.66847931543851, 0.0536153326313789,1.74069217142324, 0.0398661260009584,1.75292993880631,
0.0611228976718042,1.7801258619857, 0.11075157027145,1.80799929792913, 0.154576350333949,1.80836704643924,
0.252850776840131,1.8085633374049, 0.351078186194308,1.80854729667828, 0.449308459115237,1.80848111382848,
};
				}
			}
			public double[] g
			{
				get
				{
					return new double[] {
0,1.65547643025492,
0.0091898797926675,1.44228034549816, 0.0216086301398525,1.22921323772803, 0.0324557204588298,1.01608631194043,
0.0355888463035585,0.966342061765696, 0.0761913127518232,0.911604668743393, 0.12651905804747,0.896323275974341,
0.166513285732731,0.945428524219158, 0.185016318845342,0.968067578046058, 0.207250253801639,0.995093645755162,
0.19627288415181,1.20112975632564, 0.185279841462867,1.42371183590696, 0.173405785360393,1.62969755922848,
0.127665794591182,1.66883695510996, 0.0815778084635514,1.70758600699152, 0.035161228313771,1.74592046432554,
0.01573258772505,1.72694903637639, 0.000347142098409768,1.68036036625715, 0,1.65547643025492,
};
				}
			}
			public double[] h
			{
				get
				{
					return new double[] {
0.0465566055511809,0.748788512868099,
0.0575083315941495,0.544646244323557, 0.0673857592754989,0.34036609794324, 0.0792305350871374,0.136325582900196,
0.0860777221174782,0.105680210774903, 0.0995550986853376,0.0728164075345585, 0.122207804672381,0.0514477680442588,
0.165529970934958,0.0938904477796359, 0.205205528461058,0.133625733506368, 0.250101689989762,0.178527778038292,
0.23930736706608,0.384837574002083, 0.228513044142398,0.591147365475032, 0.217718721218716,0.797457161438823,
0.187362424602797,0.828426368191753, 0.157045782123087,0.859434465637726, 0.126728825284426,0.890442158907906,
0.0797482393705096,0.869502305026354, 0.0399313110316089,0.812602526599067, 0.0465566055511809,0.748788512868099,
};
				}
			}
			public double[] k
			{
				get
				{
					return new double[] {
0.291472533349553,0.182047850795276,
0.280542002011256,0.182047850795276, 0.269611482554978,0.182047850795276, 0.258680951216681,0.182047850795276,
0.253222648411084,0.286377555353266, 0.247764333723467,0.390707257534852, 0.242306030917871,0.495036963281044,
0.287728461409951,0.597058337175598, 0.333150880020012,0.699079699188133, 0.378573310512093,0.801101073082687,
0.38950384185039,0.801101073082687, 0.400434373188687,0.801101073082687, 0.411364904526985,0.801101073082687,
0.416823207332582,0.696771367336495, 0.422281498256159,0.592441673472323, 0.427739801061756,0.488111967726131,
0.382317382451695,0.386090593831577, 0.336894951959614,0.284069223501628, 0.291472533349553,0.182047850795276,
};
				}
			}
			public double[] m
			{
				get
				{
					return new double[] {
0.625048639936973,0.182047850795276,
0.567221262044465,0.182047850795276, 0.509393884151957,0.182047850795276, 0.45156650625945,0.182047850795276,
0.44077057444046,0.388398925683214, 0.429974654503489,0.594749993441941, 0.419178722684499,0.801101073082687,
0.477006100577007,0.801101073082687, 0.534833466587495,0.801101073082687, 0.592660844480003,0.801101073082687,
0.603456776298993,0.594749993441941, 0.614252708117983,0.388398925683214, 0.625048639936973,0.182047850795276,
};
				}
			}
			public double[] n
			{
				get
				{
					return new double[] {
0.801053373927616,0.504702701148986,
0.806680318238998,0.397151078819473, 0.81230725066836,0.289599467183779, 0.817934194979742,0.182047850795276,
0.808115282035008,0.182047850795276, 0.798296369090274,0.182047850795276, 0.788477456145541,0.182047850795276,
0.731436798660241,0.280845762255745, 0.674396153056962,0.37964367133981, 0.617355495571662,0.478441583988481,
0.611728551260281,0.585994750980556, 0.606101606948899,0.693547906090612, 0.600474662637517,0.801101073082687,
0.610292799290296,0.801101073082687, 0.620110947825095,0.801101073082687, 0.629929084477874,0.801101073082687,
0.686970514294455,0.702301615771453, 0.744011944111036,0.60350215846022, 0.801053373927616,0.504702701148986,
};
				}
			}
			public double[] p
			{
				get
				{
					return new double[] {
0.500387218153449,0.983408850188394,
0.594970724954877,0.983408850188394, 0.689554231756304,0.983408850188394, 0.784137738557732,0.983408850188394,
0.811385704983469,0.955195540953105, 0.838634313038271,0.926981340566337, 0.865882326992087,0.898768031331048,
0.842250879024335,0.868454087948702, 0.817678375095323,0.838854182658981, 0.793587663301629,0.808891685655703,
0.698897400513755,0.808903567675415, 0.6042071496079,0.808914499133551, 0.509516874938005,0.808926499973461,
};
				}
			}
			public double[] r
			{
				get
				{
					return new double[] {
0.573719241574938,1.31244332802702,
0.620364676474044,1.41720854148108, 0.66701011137315,1.52197375493513, 0.713655546272256,1.62673896838919,
0.723220726607368,1.62673896838919, 0.732785906942479,1.62673896838919, 0.742351087277591,1.62673896838919,
0.747952501089283,1.51966542704417, 0.753553914900975,1.41259188569915, 0.759155328712667,1.30551834435413,
0.712509893813561,1.20075157435549, 0.665864458914455,1.09598480435686, 0.619219024015349,0.99121803435822,
0.609654616011519,0.99121803435822, 0.600090208007688,0.99121803435822, 0.590525800003858,0.99121803435822,
0.584923613860884,1.09829313224782, 0.579321427717911,1.20536823013742, 0.573719241574938,1.31244332802702,
};
				}
			}
			public double[] s
			{
				get
				{
					return new double[] {
0.582714298840187,0.99121803435822,
0.524886920947679,0.99121803435822, 0.467059543055171,0.99121803435822, 0.409232165162664,0.99121803435822,
0.398149242960875,1.20305913783652, 0.387066320759087,1.41490024131483, 0.375983398557299,1.62674134479313,
0.433810776449807,1.62674134479313, 0.491638154342315,1.62674134479313, 0.549465532234823,1.62674134479313,
};
				}
			}
			public double[] t
			{
				get
				{
					return new double[] {
0.384105875940895,1.32211139477083,
0.389875927297698,1.21181360796663, 0.395645978654502,1.10151582116242, 0.401416030011305,0.99121803435822,
0.393039051647479,0.99121803435822, 0.384662073283654,0.99121803435822, 0.376285094919829,0.99121803435822,
0.317658619516245,1.09276211544226, 0.259032144112661,1.19430619652629, 0.200405668709077,1.29585027761033,
0.194635617352274,1.40614730000459, 0.18886556599547,1.51644432239886, 0.183095514638667,1.62674134479313,
0.191472493002492,1.62674134479313, 0.199849471366318,1.62674134479313, 0.208226449730143,1.62674134479313,
0.266852925133727,1.52519802811903, 0.325479400537311,1.42365471144493, 0.384105875940895,1.32211139477083,
};
				}
			}
			public double[] u
			{
				get
				{
					return new double[] {
0.501503474495374,0.808928816967305,
0.406376143494381,0.808940817807215, 0.311248848139447,0.808952581006731, 0.216121505256435,0.808963631285064,
0.195137680213221,0.830819073766334, 0.155684966537199,0.871716058820475, 0.134815529697761,0.893681041641478,
0.148835897088251,0.91095183058058, 0.181476803329144,0.951130571307117, 0.207636994614208,0.983408850188394,
0.302549268979744,0.983408850188394, 0.397461543345281,0.983408850188394, 0.492373817710817,0.983408850188394,
};
				}
			}

			// 高さ比率
			public float height { get { return 1.80848111382848f; } }
		}

		// 各segmentを描画するpath
		// 0=a,1=b,...,6=g,7=h,8=k,9=m,10=n,11=p,12=r,13=s,14=t,15=u
		GraphicsPath[] pathSegments;

		// font
		Segment16Font font;

		public Segment16Digit()
		{
			// double[]をPointF[]にする
			Func<double[], PointF[]> ConvertToPointFs = ( double[] a ) =>
			{
				var result = new List<PointF>();
				for( int i = 0; i < a.Length; i += 2 )
				{
					result.Add( new PointF( ( float ) a[ i ], ( float ) a[ i + 1 ] ) );
				}
				return result.ToArray();
			};

			// fontを作る
			this.font = new Segment16Font();

			// path segmentを作る
			this.pathSegments = new GraphicsPath[ 16 ];
			// open
			for( int i = 0; i < this.pathSegments.Length; ++i )
			{
				this.pathSegments[ i ] = new GraphicsPath();
				this.pathSegments[ i ].StartFigure();
			}

			// draw
			this.pathSegments[ 0 ].AddBeziers( ConvertToPointFs( this.font.a ) );
			this.pathSegments[ 1 ].AddBeziers( ConvertToPointFs( this.font.b ) );
			this.pathSegments[ 2 ].AddBeziers( ConvertToPointFs( this.font.c ) );
			this.pathSegments[ 3 ].AddBeziers( ConvertToPointFs( this.font.d ) );
			this.pathSegments[ 4 ].AddBeziers( ConvertToPointFs( this.font.e ) );
			this.pathSegments[ 5 ].AddBeziers( ConvertToPointFs( this.font.f ) );
			this.pathSegments[ 6 ].AddBeziers( ConvertToPointFs( this.font.g ) );
			this.pathSegments[ 7 ].AddBeziers( ConvertToPointFs( this.font.h ) );
			this.pathSegments[ 8 ].AddBeziers( ConvertToPointFs( this.font.k ) );
			this.pathSegments[ 9 ].AddBeziers( ConvertToPointFs( this.font.m ) );
			this.pathSegments[ 10 ].AddBeziers( ConvertToPointFs( this.font.n ) );
			this.pathSegments[ 11 ].AddBeziers( ConvertToPointFs( this.font.p ) );
			this.pathSegments[ 12 ].AddBeziers( ConvertToPointFs( this.font.r ) );
			this.pathSegments[ 13 ].AddBeziers( ConvertToPointFs( this.font.s ) );
			this.pathSegments[ 14 ].AddBeziers( ConvertToPointFs( this.font.t ) );
			this.pathSegments[ 15 ].AddBeziers( ConvertToPointFs( this.font.u ) );

			// close
			foreach( var i in this.pathSegments ) { i.CloseFigure(); }
		}

		// 数字[0,9]＋アルファベット[A-Za-z]、要するに char c を描画する
		public void Draw( Graphics g, int c, Rectangle targetRect, Color color )
		{
			if( c < 0 || c > 127 ) { throw new ArgumentException( "c := [0,127]" ); }

			// 00h~1Fhは何もしない
			if( 0 <= c && c <= 0x1F )
			{
				return;
			}

			// 20h (SP)以降 7Fh (DEL)まで
			// 以下の数表を直接編集しないこと！
			int[,] DigitFont = new int[ 96, 16 ]
			{
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   , },
{   1   ,   1   ,   0   ,   1   ,   1   ,   1   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   , },
{   1   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   1   ,   0   ,   1   ,   1   ,   1   ,   0   ,   1   ,   1   ,   1   , },
{   1   ,   0   ,   0   ,   0   ,   1   ,   1   ,   1   ,   0   ,   1   ,   1   ,   0   ,   0   ,   1   ,   0   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   , },
{   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   , },
{   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   1   ,   1   ,   1   ,   0   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   , },
{   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   , },
{   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   , },
{   1   ,   1   ,   0   ,   1   ,   1   ,   1   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   , },
{   1   ,   0   ,   0   ,   1   ,   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   , },
{   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   , },
{   1   ,   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   1   ,   0   ,   0   ,   1   ,   0   , },
{   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   0   , },
{   1   ,   1   ,   1   ,   0   ,   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   , },
{   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   , },
{   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   ,   0   ,   0   , },
{   1   ,   1   ,   0   ,   0   ,   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   , },
{   1   ,   1   ,   0   ,   0   ,   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   , },
{   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   , },
{   1   ,   1   ,   0   ,   1   ,   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   , },
{   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   , },
{   1   ,   1   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   , },
{   0   ,   0   ,   1   ,   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   1   ,   1   ,   1   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   , },
{   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   , },
{   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   , },
{   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   1   , },
{   1   ,   1   ,   0   ,   1   ,   1   ,   1   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   , },
{   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   , },
{   0   ,   0   ,   1   ,   1   ,   1   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   , },
{   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   ,   0   , },
{   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   , },
{   1   ,   1   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   , },
{   0   ,   1   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   , },
{   1   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   , },
{   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   , },
{   1   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   1   ,   1   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   , },
{   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   , },
{   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   , },
{   1   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   , },
{   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   0   ,   1   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   , },
{   0   ,   1   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   1   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   1   ,   0   ,   0   , },
{   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   1   ,   0   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   , },
{   1   ,   1   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   ,   0   , },

			};

			// (x,y)からwidthを基準に描画する
			// heightは無視する

			float scale = 1.0f / targetRect.Width;

			// scaling matrix
			var m = new Matrix();
			m.Scale( 1 / scale, 1 / scale );
			//m.Translate( targetRect.X - this.outline.X, targetRect.Y - this.outline.Y );
			m.Translate( targetRect.X * scale, targetRect.Y * scale );

			// solid monocolor brush
			var brush = new SolidBrush( color );

			for( int seg = 0; seg < 16; ++seg )
			{
				if( DigitFont[ c - 0x20, seg ] != 0 )
				{
					// transform & draw
					var tempPath = ( GraphicsPath ) this.pathSegments[ seg ].Clone();
					tempPath.Transform( m );
					g.FillPath( brush, tempPath );
				}
			}
		}

		public float Height { get { return this.font.height; } }
	}

	// 7seg時計
	public class Segment7Clock
	{
		Segment7Null spaceDrawer;
		Segment7Digit<Segment7ClockFont> clockDigitDrawer;
		Segment7Digit<Segment7CalendarFont> calDigitDrawer;
		Segment7Colon colonDrawer;
		Segment7Slash slashDrawer;
		Segment16Digit asciiDigitDrawer;

		struct ClockElement
		{
			public enum Type
			{
				Null,
				Spacing,    // スペース
				Colon,      // :
				Slash,      // /
				H1, H2,     // 時
				M1, M2,     // 分
				S1, S2,     // 秒
				Y1, Y2, Y3, Y4, // 年
				m1, m2,     // 月
				D1, D2,     // 日
				W1, W2, W3,	// 曜日（3文字）
			};

			public Type type;
			public float width;

			public ClockElement( Type t, float w )
			{
				this.type = t;
				this.width = w;
			}
		}

		List<ClockElement> clock1st, clock2nd;
		float width_1st, width_2nd;
		float line_space;

		// initialize
		public Segment7Clock()
		{
			this.spaceDrawer = new Segment7Null();
			this.clockDigitDrawer = new Segment7Digit<Segment7ClockFont>();
			this.calDigitDrawer = new Segment7Digit<Segment7CalendarFont>();
			this.colonDrawer = new Segment7Colon();
			this.slashDrawer = new Segment7Slash();
			this.asciiDigitDrawer = new Segment16Digit();

			this.clock1st = new List<ClockElement>();
			this.clock2nd = new List<ClockElement>();

			// レイアウトはこんな感じとする
			// [hh][mm]の数字の1桁の横幅を1とすると、
			// 10:15 15		<- [sec]は0.3135, [sec]の桁間0.05661, [sec][mm]間は0.2162, 桁間0.1805, [hh][mm]間0.6817, ：の円の直径0.1734, ：と[hh][mm]の間0.2542
			// 2019/11/29   <- 数値は0.5813, 桁間0.1049, '/'は0.4074

			// 一行目基準！
			line_space = 0.25f;      // 適当

			// 一行目
			clock1st.Add( new ClockElement( ClockElement.Type.H1, 1.0f ) );
			clock1st.Add( new ClockElement( ClockElement.Type.Spacing, 0.1805f ) );
			clock1st.Add( new ClockElement( ClockElement.Type.H2, 1.0f ) );
			clock1st.Add( new ClockElement( ClockElement.Type.Spacing, 0.2542f ) );
			clock1st.Add( new ClockElement( ClockElement.Type.Colon, 0.2209f ) );
			clock1st.Add( new ClockElement( ClockElement.Type.Spacing, 0.2542f ) );
			clock1st.Add( new ClockElement( ClockElement.Type.M1, 1.0f ) );
			clock1st.Add( new ClockElement( ClockElement.Type.Spacing, 0.1805f ) );
			clock1st.Add( new ClockElement( ClockElement.Type.M2, 1.0f ) );
			clock1st.Add( new ClockElement( ClockElement.Type.Spacing, 0.2162f ) );
			clock1st.Add( new ClockElement( ClockElement.Type.S1, 0.3136f ) );
			clock1st.Add( new ClockElement( ClockElement.Type.Spacing, 0.05661f ) );
			clock1st.Add( new ClockElement( ClockElement.Type.S2, 0.3136f ) );

			this.width_1st = clock1st.Sum( ( ClockElement e ) => { return e.width; } );

			// 二行目
			clock2nd.Add( new ClockElement( ClockElement.Type.Y1, 1.0f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.Spacing, 0.1805f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.Y2, 1.0f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.Spacing, 0.1805f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.Y3, 1.0f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.Spacing, 0.1805f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.Y4, 1.0f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.Slash, 0.7007f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.m1, 1.0f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.Spacing, 0.1805f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.m2, 1.0f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.Slash, 0.7007f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.D1, 1.0f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.Spacing, 0.1805f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.D2, 1.0f ) );
			// 曜日
			clock2nd.Add( new ClockElement( ClockElement.Type.Spacing, 1.0f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.W1, 0.8f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.Spacing, 0.1444f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.W2, 0.8f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.Spacing, 0.1444f ) );
			clock2nd.Add( new ClockElement( ClockElement.Type.W3, 0.8f ) );

			this.width_2nd = clock2nd.Sum( ( ClockElement e ) => { return e.width; } );
		}

		// 全体の大きさを取得する
		// 横を1としたときの縦幅
		public PointF Size
		{
			get
			{
				return new PointF
					( 1.0f
					// 1行目＋行間＋2行目になる
					, ( this.clockDigitDrawer.Height + this.line_space + this.calDigitDrawer.Height * ( this.width_1st / this.width_2nd ) ) / this.width_1st );
			}
		}

		// 時計フレームを作成する
		// 何を描くかはわかっているとする。targetRectに収まるように適当に拡大縮小する
		// styleでスタイルを変えられることにする（未実装）
		public void BuildClock( Graphics g, Rectangle targetRect, DateTime time, Color color1, Color color2, int style = 0 )
		{
			// 24時制でBezier曲線で表された7seg時計を描く
			Func<ClockElement, int> GetParam = ( ClockElement e ) =>
			{
				//				return 8;

				// 上の桁で0の場合は10を返す（＝描画しない）ようにする
				Func<int, int> UpperDigit = ( int a ) =>
				{
					if( a == 0 ) { return 10; }
					else { return a; }
				};

				switch( e.type )
				{
				case ClockElement.Type.H1:
					return UpperDigit( time.Hour / 10 % 10 );
				case ClockElement.Type.H2:
					return time.Hour % 10;
				case ClockElement.Type.M1:
					return time.Minute / 10 % 10;
				case ClockElement.Type.M2:
					return time.Minute % 10;
				case ClockElement.Type.S1:
					return time.Second / 10 % 10;
				case ClockElement.Type.S2:
					return time.Second % 10;
				case ClockElement.Type.Y1:
					return time.Year / 1000 % 10;
				case ClockElement.Type.Y2:
					return time.Year / 100 % 10;
				case ClockElement.Type.Y3:
					return time.Year / 10 % 10;
				case ClockElement.Type.Y4:
					return time.Year % 10;
				case ClockElement.Type.m1:
					return UpperDigit( time.Month / 10 % 10 );
				case ClockElement.Type.m2:
					return time.Month % 10;
				case ClockElement.Type.D1:
					return UpperDigit( time.Day / 10 % 10 );
				case ClockElement.Type.D2:
					return time.Day % 10;
				default:
					// 3文字コードで取得して1文字ずつ描画
					if( ClockElement.Type.W1 <= e.type && e.type <= ClockElement.Type.W3 )
					{
/*						int elapsed_sec = ( int ) ( time - System.Diagnostics.Process.GetCurrentProcess().StartTime ).TotalSeconds;
						int charcode = ( elapsed_sec + e.type - ClockElement.Type.W1 ) % 96 + 0x20;
						return charcode;*/

						var weekday = time.ToString( "ddd", System.Globalization.CultureInfo.CreateSpecificCulture( "en-US" ) ).ToUpper();
						return weekday[ e.type - ClockElement.Type.W1 ];
					}
					else
					{
						return 0;
					}
				}
			};

			Func<ClockElement, Segment7Component> GetDrawer = ( ClockElement e ) =>
			{
				switch( e.type )
				{
				case ClockElement.Type.Colon:
					return this.colonDrawer;
				case ClockElement.Type.Slash:
					return this.slashDrawer;
				case ClockElement.Type.Spacing:
					return this.spaceDrawer;
				default:
					if( ClockElement.Type.H1 <= e.type && e.type <= ClockElement.Type.S2 )
					{
						return this.clockDigitDrawer;
					}
					else if( ClockElement.Type.Y1 <= e.type && e.type <= ClockElement.Type.D2 )
					{
						return this.calDigitDrawer;
					}
					else if( ClockElement.Type.W1 <= e.type && e.type <= ClockElement.Type.W3 )
					{
						return this.asciiDigitDrawer;
					}

					throw new ArgumentOutOfRangeException( "e.type" );
				}
			};

			// anti-aliasing
			g.SmoothingMode = SmoothingMode.AntiAlias;

			// targetRectの幅に合わせて全体をscalingする
			float scale1 = this.width_1st / targetRect.Width;

			// 描く
			int x_pos = 0;
			int height_base = ( int ) ( this.clockDigitDrawer.Height / scale1 );

			//debug
			var mypen = new Pen( color1, 1 );

			foreach( var e in this.clock1st )
			{
				Segment7Component drawer = GetDrawer( e );
				int width = ( int ) ( e.width / scale1 );
				int height = ( int ) ( drawer.Height * e.width / scale1 );
				var componentRect = new Rectangle( targetRect.X + x_pos, targetRect.Y + height_base - height, width, height );
				int param = GetParam( e );

				//System.Diagnostics.Debug.WriteLine( "type=" + e.type.ToString() + ",x_pos=" + x_pos.ToString() + ",rect=" + componentRect.ToString() );

				//debug
				//g.DrawRectangle( mypen, componentRect );

				drawer.Draw( g, param, componentRect, color1 );

				x_pos += componentRect.Width;
			}

			// 間に横線を入れてみる（幅の8割くらい）
			var linePen = new Pen( Color.FromArgb( 255, 255, 255 ), 3 );
			var lineFrom = new PointF( targetRect.X + targetRect.Width * 0f, targetRect.Y + height_base + this.line_space / scale1 / 2 );
			var lineTo = new PointF( targetRect.X + targetRect.Width * 1f, lineFrom.Y );
			g.DrawLine( linePen, lineFrom, lineTo );

			// 二行目も描く
			float scale2 = this.width_2nd / targetRect.Width;
			x_pos = 0;
			height_base += ( int ) ( this.calDigitDrawer.Height / scale2 + this.line_space / scale1 );

			foreach( var e in this.clock2nd )
			{
				Segment7Component drawer = GetDrawer( e );
				int width = ( int ) ( e.width / scale2 );
				int height = ( int ) ( drawer.Height * e.width / scale2 );
				var componentRect = new Rectangle( targetRect.X + x_pos, targetRect.Y + height_base - height, width, height );
				int param = GetParam( e );

				//System.Diagnostics.Debug.WriteLine( "type=" + e.type.ToString() + ",x_pos=" + x_pos.ToString() + ",rect=" + componentRect.ToString() );

				//debug
				//g.DrawRectangle( mypen, componentRect );

				drawer.Draw( g, param, componentRect, color2 );

				x_pos += componentRect.Width;
			}
		}
	}
}
